# Subgraph Schema: DEX AMM
# Version: 1.0.0

enum Network {
  AVALANCHE
  AURORA
  BSC
  CELO
  CRONOS
  ETHEREUM
  FANTOM
  HARMONY
  MOONBEAM
  MOONRIVER
  OPTIMISM
  POLYGON
  XDAI
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  tokenPrices: [_TokenPrice!] @derivedFrom(field: "token")
}

enum RewardTokenType {
  DEPOSIT
  BORROW
}

type RewardToken @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  type: RewardTokenType!
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  id: ID!
  name: String!
  slug: String!
  schemaVersion: String!
  subgraphVersion: String!
  network: Network!
  type: ProtocolType!
  totalUniqueUsers: Int!
  totalValueLockedUSD: BigDecimal!
  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  id: ID!
  protocol: DexAmmProtocol!
  activeUsers: Int!
  totalUniqueUsers: Int!
  dailyTransactionCount: Int!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  id: ID!
  protocol: DexAmmProtocol!
  totalValueLockedUSD: BigDecimal!
  protocolTreasuryUSD: BigDecimal
  protocolControlledValueUSD: BigDecimal
  totalVolumeUSD: BigDecimal!
  supplySideRevenueUSD: BigDecimal!
  protocolSideRevenueUSD: BigDecimal!
  totalRevenueUSD: BigDecimal!
  blockNumber: BigInt!
  timestamp: BigInt!
}

###############################################################################
################################# DEX AMM #####################################
###############################################################################

type DexAmmProtocol implements Protocol @entity {
  id: ID!
  name: String!
  slug: String!
  schemaVersion: String!
  subgraphVersion: String!
  methodologyVersion: String!
  network: Network!
  type: ProtocolType!
  totalUniqueUsers: Int!
  totalValueLockedUSD: BigDecimal!
  totalVolumeUSD: BigDecimal!
  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
  ##### DexAmm-Specific #####
  pools: [LiquidityPool!]! @derivedFrom(field: "protocol")
}

# Note that trading fee is the fee paid *by* the users, whereas LP fee and
# protocol fee are fees paid *to* the corresponding parties.
# Most of the time, trading fee = liquidity provider fee + protocol fee,
# but not always. Thus we explicitly specify all different fee types.
enum LiquidityPoolFeeType {
  " Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. "
  FIXED_TRADING_FEE

  " Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. "
  TIERED_TRADING_FEE

  " Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_TRADING_FEE

  " Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1. "
  FIXED_LP_FEE

  " Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_LP_FEE

  " Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1. "
  FIXED_PROTOCOL_FEE

  " Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_PROTOCOL_FEE
}

type LiquidityPoolFee @entity {
  id: ID!
  pool: LiquidityPool!
  feePercentage: BigDecimal!
  feeType: LiquidityPoolFeeType!
}

###############################
##### Pool-Level Metadata #####
###############################

type LiquidityPool @entity {
  id: ID!
  protocol: DexAmmProtocol!
  inputTokens: [Token!]!
  outputToken: Token!
  rewardTokens: [RewardToken!]
  ##### Quantitative Data #####
  totalValueLockedUSD: BigDecimal!
  totalVolumeUSD: BigDecimal!
  inputTokenBalances: [BigInt!]!
  outputTokenSupply: BigInt!
  outputTokenPriceUSD: BigDecimal!
  stakedOutputTokenAmount: BigInt
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  createdTimestamp: BigInt!
  createdBlockNumber: BigInt!
  snapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")
  ##### DexAmm-Specific #####
  name: String
  symbol: String
  fees: [LiquidityPoolFee!]! @derivedFrom(field: "pool")
  inputTokenWeights: [BigDecimal!]!
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  withdraws: [Withdraw!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")
}

#################################
##### Pool-Level Timeseries #####
#################################

type PoolDailySnapshot @entity {
  id: ID!
  protocol: DexAmmProtocol!
  pool: LiquidityPool!
  totalValueLockedUSD: BigDecimal!
  totalVolumeUSD: BigDecimal!
  inputTokenBalances: [BigInt!]!
  outputTokenSupply: BigInt!
  outputTokenPriceUSD: BigDecimal!
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  blockNumber: BigInt!
  timestamp: BigInt!
}

##################################
##### Transaction-Level Data #####
##################################

# An event is any user action that occurs in a protocol. Generally, they are Ethereum events
# emitted by a function in the smart contracts, stored in transaction receipts as event logs.
# However, some user actions of interest are function calls that don't emit events. For example,
# the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
# store them as events, although they are not technically Ethereum events emitted by smart
# contracts.

interface Event {
  id: ID!
  hash: String!
  logIndex: Int!
  protocol: DexAmmProtocol!
  to: String!
  from: String!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type Deposit implements Event @entity {
  id: ID!
  hash: String!
  logIndex: Int!
  protocol: DexAmmProtocol!
  to: String!
  from: String!
  blockNumber: BigInt!
  timestamp: BigInt!
  inputTokens: [Token!]!
  outputToken: Token!
  inputTokenAmounts: [BigInt!]!
  outputTokenAmount: BigInt!
  amountUSD: BigDecimal!
  ##### DexAmm-Specific #####
  pool: LiquidityPool!
}

type Withdraw implements Event @entity {
  id: ID!
  hash: String!
  logIndex: Int!
  protocol: DexAmmProtocol!
  to: String!
  from: String!
  blockNumber: BigInt!
  timestamp: BigInt!
  inputTokens: [Token!]!
  outputToken: Token!
  inputTokenAmounts: [BigInt!]!
  outputTokenAmount: BigInt!
  amountUSD: BigDecimal!
  ##### DexAmm-Specific #####
  pool: LiquidityPool!
}

type Swap implements Event @entity {
  id: ID!
  hash: String!
  logIndex: Int!
  protocol: DexAmmProtocol!
  to: String!
  from: String!
  blockNumber: BigInt!
  timestamp: BigInt!
  tokenIn: Token!
  amountIn: BigInt!
  amountInUSD: BigDecimal!
  tokenOut: Token!
  amountOut: BigInt!
  amountOutUSD: BigDecimal!
  ##### DexAmm-Specific #####
  pool: LiquidityPool!
}

###########################
##### Helper Entities #####
###########################

# Helper entities are additional entities cre[ated to help with mapping.
# They are usually used to store internal states that would simplify
# the mapping logic. All helper entities should be prefixed with an
# underscore to differentiate them from the common schema.

# An account is a unique Ethereum address
type _Account @entity {
  " Address of the account "
  id: ID!
}

type _DailyActiveAccount @entity {
  " { Days since Unix epoch }-{ Address of the account } "
  id: ID!
}

type _TokenPrice @entity {
  id: ID!
  token: Token!
  currentUSDprice: BigDecimal!
}

# type _DailyPoolstats @entity {
#   id: ID!
#   lpToken: Token!
#   dailyEmissions: BigInt!
#   deUSDamount: Bigint!
# }
